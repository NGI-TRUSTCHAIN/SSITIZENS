/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common.js";

export interface IzTokenInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "UPGRADE_INTERFACE_VERSION"
      | "addParty"
      | "allowance"
      | "approve"
      | "balanceOf"
      | "burn"
      | "burnFrom"
      | "canTransfer"
      | "canTransferFrom"
      | "changeIssuer"
      | "compensationContract"
      | "compense"
      | "controllerRedeem"
      | "controllerTransfer"
      | "decimals"
      | "distribute"
      | "distributeBatch"
      | "generate"
      | "getAttachedData"
      | "initialize"
      | "isControllable"
      | "isIssuable"
      | "issue"
      | "issuer"
      | "minimumTransfer"
      | "minimumUserBalance"
      | "name"
      | "owner"
      | "parties"
      | "partyPermission"
      | "pause"
      | "paused"
      | "proxiableUUID"
      | "redeem"
      | "redeemFrom"
      | "removeParty"
      | "renounceOwnership"
      | "setCompensationContract"
      | "setMinimumTransfer"
      | "setMinimumUserBalance"
      | "symbol"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "transferFromWithData"
      | "transferOwnership"
      | "transferWithData"
      | "unpause"
      | "upgradeToAndCall"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "CompensationContractChanged"
      | "ControllerRedemption"
      | "ControllerTransfer"
      | "Initialized"
      | "Issued"
      | "MinimumTransferChanged"
      | "MinimumUserBalanceChanged"
      | "OwnershipTransferred"
      | "PartyRemoved"
      | "PartyUpdated"
      | "Paused"
      | "Redeemed"
      | "Transfer"
      | "Unpaused"
      | "Upgraded"
      | "changeIssuerEvent"
      | "executionComplete"
      | "partialExecution"
      | "transferWithDataEvent"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addParty",
    values: [AddressLike, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "burn", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "burnFrom",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "canTransfer",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "canTransferFrom",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "changeIssuer",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "compensationContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "compense",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "controllerRedeem",
    values: [AddressLike, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "controllerTransfer",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "distribute",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "distributeBatch",
    values: [AddressLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "generate",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAttachedData",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      AddressLike,
      AddressLike,
      string,
      string,
      BigNumberish,
      BigNumberish,
      AddressLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isControllable",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isIssuable",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "issue",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "issuer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "minimumTransfer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minimumUserBalance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "parties",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "partyPermission",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemFrom",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeParty",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setCompensationContract",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinimumTransfer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinimumUserBalance",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFromWithData",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferWithData",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addParty", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burnFrom", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "canTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeIssuer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "compensationContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "compense", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "controllerRedeem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "controllerTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "distribute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "distributeBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "generate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAttachedData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isControllable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isIssuable", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "issue", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "issuer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minimumTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minimumUserBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "parties", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "partyPermission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "redeemFrom", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeParty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCompensationContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinimumTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinimumUserBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFromWithData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferWithData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [owner: string, spender: string, value: bigint];
  export interface OutputObject {
    owner: string;
    spender: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CompensationContractChangedEvent {
  export type InputTuple = [
    oldCompensationContract: AddressLike,
    newCompensationContract: AddressLike
  ];
  export type OutputTuple = [
    oldCompensationContract: string,
    newCompensationContract: string
  ];
  export interface OutputObject {
    oldCompensationContract: string;
    newCompensationContract: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ControllerRedemptionEvent {
  export type InputTuple = [
    _controller: AddressLike,
    _tokenHolder: AddressLike,
    _value: BigNumberish,
    _data: BytesLike,
    _operatorData: BytesLike
  ];
  export type OutputTuple = [
    _controller: string,
    _tokenHolder: string,
    _value: bigint,
    _data: string,
    _operatorData: string
  ];
  export interface OutputObject {
    _controller: string;
    _tokenHolder: string;
    _value: bigint;
    _data: string;
    _operatorData: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ControllerTransferEvent {
  export type InputTuple = [
    _controller: AddressLike,
    _from: AddressLike,
    _to: AddressLike,
    _value: BigNumberish,
    _data: BytesLike,
    _operatorData: BytesLike
  ];
  export type OutputTuple = [
    _controller: string,
    _from: string,
    _to: string,
    _value: bigint,
    _data: string,
    _operatorData: string
  ];
  export interface OutputObject {
    _controller: string;
    _from: string;
    _to: string;
    _value: bigint;
    _data: string;
    _operatorData: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace IssuedEvent {
  export type InputTuple = [
    _operator: AddressLike,
    _to: AddressLike,
    _value: BigNumberish,
    _data: BytesLike
  ];
  export type OutputTuple = [
    _operator: string,
    _to: string,
    _value: bigint,
    _data: string
  ];
  export interface OutputObject {
    _operator: string;
    _to: string;
    _value: bigint;
    _data: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MinimumTransferChangedEvent {
  export type InputTuple = [
    oldMinimumTransfer: BigNumberish,
    newMinimumTransfer: BigNumberish
  ];
  export type OutputTuple = [
    oldMinimumTransfer: bigint,
    newMinimumTransfer: bigint
  ];
  export interface OutputObject {
    oldMinimumTransfer: bigint;
    newMinimumTransfer: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MinimumUserBalanceChangedEvent {
  export type InputTuple = [
    oldMinimumUserBalance: BigNumberish,
    newMinimumUserBalance: BigNumberish
  ];
  export type OutputTuple = [
    oldMinimumUserBalance: bigint,
    newMinimumUserBalance: bigint
  ];
  export interface OutputObject {
    oldMinimumUserBalance: bigint;
    newMinimumUserBalance: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PartyRemovedEvent {
  export type InputTuple = [user: AddressLike];
  export type OutputTuple = [user: string];
  export interface OutputObject {
    user: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PartyUpdatedEvent {
  export type InputTuple = [
    user: AddressLike,
    permission: BigNumberish,
    expiration: BigNumberish,
    attachedData: BytesLike
  ];
  export type OutputTuple = [
    user: string,
    permission: bigint,
    expiration: bigint,
    attachedData: string
  ];
  export interface OutputObject {
    user: string;
    permission: bigint;
    expiration: bigint;
    attachedData: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RedeemedEvent {
  export type InputTuple = [
    _operator: AddressLike,
    _from: AddressLike,
    _value: BigNumberish,
    _data: BytesLike
  ];
  export type OutputTuple = [
    _operator: string,
    _from: string,
    _value: bigint,
    _data: string
  ];
  export interface OutputObject {
    _operator: string;
    _from: string;
    _value: bigint;
    _data: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, value: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace changeIssuerEventEvent {
  export type InputTuple = [oldIssuer: AddressLike, newIssuer: AddressLike];
  export type OutputTuple = [oldIssuer: string, newIssuer: string];
  export interface OutputObject {
    oldIssuer: string;
    newIssuer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace executionCompleteEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace partialExecutionEvent {
  export type InputTuple = [currentIndex: BigNumberish];
  export type OutputTuple = [currentIndex: bigint];
  export interface OutputObject {
    currentIndex: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace transferWithDataEventEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish,
    data: BytesLike
  ];
  export type OutputTuple = [
    from: string,
    to: string,
    value: bigint,
    data: string
  ];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
    data: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IzToken extends BaseContract {
  connect(runner?: ContractRunner | null): IzToken;
  waitForDeployment(): Promise<this>;

  interface: IzTokenInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  UPGRADE_INTERFACE_VERSION: TypedContractMethod<[], [string], "view">;

  addParty: TypedContractMethod<
    [
      _user: AddressLike,
      _permission: BigNumberish,
      _expiration: BigNumberish,
      _attachedData: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  allowance: TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;

  approve: TypedContractMethod<
    [spender: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  burn: TypedContractMethod<[value: BigNumberish], [void], "nonpayable">;

  burnFrom: TypedContractMethod<
    [account: AddressLike, value: BigNumberish],
    [void],
    "nonpayable"
  >;

  canTransfer: TypedContractMethod<
    [_to: AddressLike, _value: BigNumberish, arg2: BytesLike],
    [[boolean, string, string] & { result: boolean; resultCode: string }],
    "view"
  >;

  canTransferFrom: TypedContractMethod<
    [
      _from: AddressLike,
      _to: AddressLike,
      _value: BigNumberish,
      arg3: BytesLike
    ],
    [[boolean, string, string] & { result: boolean; resultCode: string }],
    "view"
  >;

  changeIssuer: TypedContractMethod<
    [_newIssuer: AddressLike],
    [void],
    "nonpayable"
  >;

  compensationContract: TypedContractMethod<[], [string], "view">;

  compense: TypedContractMethod<
    [_recipient: AddressLike],
    [void],
    "nonpayable"
  >;

  controllerRedeem: TypedContractMethod<
    [
      _tokenHolder: AddressLike,
      _value: BigNumberish,
      _data: BytesLike,
      _operatorData: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  controllerTransfer: TypedContractMethod<
    [
      _from: AddressLike,
      _to: AddressLike,
      _value: BigNumberish,
      _data: BytesLike,
      _operatorData: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  decimals: TypedContractMethod<[], [bigint], "view">;

  distribute: TypedContractMethod<
    [_to: AddressLike, _value: BigNumberish, _data: BytesLike],
    [void],
    "nonpayable"
  >;

  distributeBatch: TypedContractMethod<
    [_to: AddressLike[], _value: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  generate: TypedContractMethod<
    [_value: BigNumberish, _data: BytesLike],
    [void],
    "nonpayable"
  >;

  getAttachedData: TypedContractMethod<[_user: AddressLike], [string], "view">;

  initialize: TypedContractMethod<
    [
      _owner: AddressLike,
      _issuer: AddressLike,
      _name: string,
      _symbol: string,
      _minimumTransfer: BigNumberish,
      _minimumUserBalance: BigNumberish,
      _compensationContract: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  isControllable: TypedContractMethod<[], [boolean], "view">;

  isIssuable: TypedContractMethod<[], [boolean], "view">;

  issue: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish, arg2: BytesLike],
    [void],
    "view"
  >;

  issuer: TypedContractMethod<[], [string], "view">;

  minimumTransfer: TypedContractMethod<[], [bigint], "view">;

  minimumUserBalance: TypedContractMethod<[], [bigint], "view">;

  name: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  parties: TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, string] & {
        permission: bigint;
        expiration: bigint;
        attachedData: string;
      }
    ],
    "view"
  >;

  partyPermission: TypedContractMethod<
    [_user: AddressLike, timestamp: BigNumberish],
    [bigint],
    "view"
  >;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  redeem: TypedContractMethod<
    [_value: BigNumberish, _data: BytesLike],
    [void],
    "nonpayable"
  >;

  redeemFrom: TypedContractMethod<
    [_from: AddressLike, _value: BigNumberish, _data: BytesLike],
    [void],
    "nonpayable"
  >;

  removeParty: TypedContractMethod<[_user: AddressLike], [void], "nonpayable">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setCompensationContract: TypedContractMethod<
    [_compensationContract: AddressLike],
    [void],
    "nonpayable"
  >;

  setMinimumTransfer: TypedContractMethod<
    [_minimumTransfer: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMinimumUserBalance: TypedContractMethod<
    [_minimumUserBalance: BigNumberish],
    [void],
    "nonpayable"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transfer: TypedContractMethod<
    [_to: AddressLike, _value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferFrom: TypedContractMethod<
    [_from: AddressLike, _to: AddressLike, _value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferFromWithData: TypedContractMethod<
    [
      _from: AddressLike,
      _to: AddressLike,
      _value: BigNumberish,
      _data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  transferWithData: TypedContractMethod<
    [_to: AddressLike, _value: BigNumberish, _data: BytesLike],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "UPGRADE_INTERFACE_VERSION"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "addParty"
  ): TypedContractMethod<
    [
      _user: AddressLike,
      _permission: BigNumberish,
      _expiration: BigNumberish,
      _attachedData: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [spender: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "burn"
  ): TypedContractMethod<[value: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "burnFrom"
  ): TypedContractMethod<
    [account: AddressLike, value: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "canTransfer"
  ): TypedContractMethod<
    [_to: AddressLike, _value: BigNumberish, arg2: BytesLike],
    [[boolean, string, string] & { result: boolean; resultCode: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "canTransferFrom"
  ): TypedContractMethod<
    [
      _from: AddressLike,
      _to: AddressLike,
      _value: BigNumberish,
      arg3: BytesLike
    ],
    [[boolean, string, string] & { result: boolean; resultCode: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "changeIssuer"
  ): TypedContractMethod<[_newIssuer: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "compensationContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "compense"
  ): TypedContractMethod<[_recipient: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "controllerRedeem"
  ): TypedContractMethod<
    [
      _tokenHolder: AddressLike,
      _value: BigNumberish,
      _data: BytesLike,
      _operatorData: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "controllerTransfer"
  ): TypedContractMethod<
    [
      _from: AddressLike,
      _to: AddressLike,
      _value: BigNumberish,
      _data: BytesLike,
      _operatorData: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "distribute"
  ): TypedContractMethod<
    [_to: AddressLike, _value: BigNumberish, _data: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "distributeBatch"
  ): TypedContractMethod<
    [_to: AddressLike[], _value: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "generate"
  ): TypedContractMethod<
    [_value: BigNumberish, _data: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAttachedData"
  ): TypedContractMethod<[_user: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      _owner: AddressLike,
      _issuer: AddressLike,
      _name: string,
      _symbol: string,
      _minimumTransfer: BigNumberish,
      _minimumUserBalance: BigNumberish,
      _compensationContract: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isControllable"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isIssuable"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "issue"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish, arg2: BytesLike],
    [void],
    "view"
  >;
  getFunction(
    nameOrSignature: "issuer"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "minimumTransfer"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minimumUserBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "parties"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, string] & {
        permission: bigint;
        expiration: bigint;
        attachedData: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "partyPermission"
  ): TypedContractMethod<
    [_user: AddressLike, timestamp: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "proxiableUUID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "redeem"
  ): TypedContractMethod<
    [_value: BigNumberish, _data: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "redeemFrom"
  ): TypedContractMethod<
    [_from: AddressLike, _value: BigNumberish, _data: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeParty"
  ): TypedContractMethod<[_user: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setCompensationContract"
  ): TypedContractMethod<
    [_compensationContract: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMinimumTransfer"
  ): TypedContractMethod<
    [_minimumTransfer: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMinimumUserBalance"
  ): TypedContractMethod<
    [_minimumUserBalance: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [_to: AddressLike, _value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [_from: AddressLike, _to: AddressLike, _value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFromWithData"
  ): TypedContractMethod<
    [
      _from: AddressLike,
      _to: AddressLike,
      _value: BigNumberish,
      _data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferWithData"
  ): TypedContractMethod<
    [_to: AddressLike, _value: BigNumberish, _data: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "CompensationContractChanged"
  ): TypedContractEvent<
    CompensationContractChangedEvent.InputTuple,
    CompensationContractChangedEvent.OutputTuple,
    CompensationContractChangedEvent.OutputObject
  >;
  getEvent(
    key: "ControllerRedemption"
  ): TypedContractEvent<
    ControllerRedemptionEvent.InputTuple,
    ControllerRedemptionEvent.OutputTuple,
    ControllerRedemptionEvent.OutputObject
  >;
  getEvent(
    key: "ControllerTransfer"
  ): TypedContractEvent<
    ControllerTransferEvent.InputTuple,
    ControllerTransferEvent.OutputTuple,
    ControllerTransferEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "Issued"
  ): TypedContractEvent<
    IssuedEvent.InputTuple,
    IssuedEvent.OutputTuple,
    IssuedEvent.OutputObject
  >;
  getEvent(
    key: "MinimumTransferChanged"
  ): TypedContractEvent<
    MinimumTransferChangedEvent.InputTuple,
    MinimumTransferChangedEvent.OutputTuple,
    MinimumTransferChangedEvent.OutputObject
  >;
  getEvent(
    key: "MinimumUserBalanceChanged"
  ): TypedContractEvent<
    MinimumUserBalanceChangedEvent.InputTuple,
    MinimumUserBalanceChangedEvent.OutputTuple,
    MinimumUserBalanceChangedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PartyRemoved"
  ): TypedContractEvent<
    PartyRemovedEvent.InputTuple,
    PartyRemovedEvent.OutputTuple,
    PartyRemovedEvent.OutputObject
  >;
  getEvent(
    key: "PartyUpdated"
  ): TypedContractEvent<
    PartyUpdatedEvent.InputTuple,
    PartyUpdatedEvent.OutputTuple,
    PartyUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "Redeemed"
  ): TypedContractEvent<
    RedeemedEvent.InputTuple,
    RedeemedEvent.OutputTuple,
    RedeemedEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;
  getEvent(
    key: "changeIssuerEvent"
  ): TypedContractEvent<
    changeIssuerEventEvent.InputTuple,
    changeIssuerEventEvent.OutputTuple,
    changeIssuerEventEvent.OutputObject
  >;
  getEvent(
    key: "executionComplete"
  ): TypedContractEvent<
    executionCompleteEvent.InputTuple,
    executionCompleteEvent.OutputTuple,
    executionCompleteEvent.OutputObject
  >;
  getEvent(
    key: "partialExecution"
  ): TypedContractEvent<
    partialExecutionEvent.InputTuple,
    partialExecutionEvent.OutputTuple,
    partialExecutionEvent.OutputObject
  >;
  getEvent(
    key: "transferWithDataEvent"
  ): TypedContractEvent<
    transferWithDataEventEvent.InputTuple,
    transferWithDataEventEvent.OutputTuple,
    transferWithDataEventEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "CompensationContractChanged(address,address)": TypedContractEvent<
      CompensationContractChangedEvent.InputTuple,
      CompensationContractChangedEvent.OutputTuple,
      CompensationContractChangedEvent.OutputObject
    >;
    CompensationContractChanged: TypedContractEvent<
      CompensationContractChangedEvent.InputTuple,
      CompensationContractChangedEvent.OutputTuple,
      CompensationContractChangedEvent.OutputObject
    >;

    "ControllerRedemption(address,address,uint256,bytes,bytes)": TypedContractEvent<
      ControllerRedemptionEvent.InputTuple,
      ControllerRedemptionEvent.OutputTuple,
      ControllerRedemptionEvent.OutputObject
    >;
    ControllerRedemption: TypedContractEvent<
      ControllerRedemptionEvent.InputTuple,
      ControllerRedemptionEvent.OutputTuple,
      ControllerRedemptionEvent.OutputObject
    >;

    "ControllerTransfer(address,address,address,uint256,bytes,bytes)": TypedContractEvent<
      ControllerTransferEvent.InputTuple,
      ControllerTransferEvent.OutputTuple,
      ControllerTransferEvent.OutputObject
    >;
    ControllerTransfer: TypedContractEvent<
      ControllerTransferEvent.InputTuple,
      ControllerTransferEvent.OutputTuple,
      ControllerTransferEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "Issued(address,address,uint256,bytes)": TypedContractEvent<
      IssuedEvent.InputTuple,
      IssuedEvent.OutputTuple,
      IssuedEvent.OutputObject
    >;
    Issued: TypedContractEvent<
      IssuedEvent.InputTuple,
      IssuedEvent.OutputTuple,
      IssuedEvent.OutputObject
    >;

    "MinimumTransferChanged(uint256,uint256)": TypedContractEvent<
      MinimumTransferChangedEvent.InputTuple,
      MinimumTransferChangedEvent.OutputTuple,
      MinimumTransferChangedEvent.OutputObject
    >;
    MinimumTransferChanged: TypedContractEvent<
      MinimumTransferChangedEvent.InputTuple,
      MinimumTransferChangedEvent.OutputTuple,
      MinimumTransferChangedEvent.OutputObject
    >;

    "MinimumUserBalanceChanged(uint256,uint256)": TypedContractEvent<
      MinimumUserBalanceChangedEvent.InputTuple,
      MinimumUserBalanceChangedEvent.OutputTuple,
      MinimumUserBalanceChangedEvent.OutputObject
    >;
    MinimumUserBalanceChanged: TypedContractEvent<
      MinimumUserBalanceChangedEvent.InputTuple,
      MinimumUserBalanceChangedEvent.OutputTuple,
      MinimumUserBalanceChangedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PartyRemoved(address)": TypedContractEvent<
      PartyRemovedEvent.InputTuple,
      PartyRemovedEvent.OutputTuple,
      PartyRemovedEvent.OutputObject
    >;
    PartyRemoved: TypedContractEvent<
      PartyRemovedEvent.InputTuple,
      PartyRemovedEvent.OutputTuple,
      PartyRemovedEvent.OutputObject
    >;

    "PartyUpdated(address,uint8,uint256,bytes)": TypedContractEvent<
      PartyUpdatedEvent.InputTuple,
      PartyUpdatedEvent.OutputTuple,
      PartyUpdatedEvent.OutputObject
    >;
    PartyUpdated: TypedContractEvent<
      PartyUpdatedEvent.InputTuple,
      PartyUpdatedEvent.OutputTuple,
      PartyUpdatedEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "Redeemed(address,address,uint256,bytes)": TypedContractEvent<
      RedeemedEvent.InputTuple,
      RedeemedEvent.OutputTuple,
      RedeemedEvent.OutputObject
    >;
    Redeemed: TypedContractEvent<
      RedeemedEvent.InputTuple,
      RedeemedEvent.OutputTuple,
      RedeemedEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;

    "changeIssuerEvent(address,address)": TypedContractEvent<
      changeIssuerEventEvent.InputTuple,
      changeIssuerEventEvent.OutputTuple,
      changeIssuerEventEvent.OutputObject
    >;
    changeIssuerEvent: TypedContractEvent<
      changeIssuerEventEvent.InputTuple,
      changeIssuerEventEvent.OutputTuple,
      changeIssuerEventEvent.OutputObject
    >;

    "executionComplete()": TypedContractEvent<
      executionCompleteEvent.InputTuple,
      executionCompleteEvent.OutputTuple,
      executionCompleteEvent.OutputObject
    >;
    executionComplete: TypedContractEvent<
      executionCompleteEvent.InputTuple,
      executionCompleteEvent.OutputTuple,
      executionCompleteEvent.OutputObject
    >;

    "partialExecution(uint256)": TypedContractEvent<
      partialExecutionEvent.InputTuple,
      partialExecutionEvent.OutputTuple,
      partialExecutionEvent.OutputObject
    >;
    partialExecution: TypedContractEvent<
      partialExecutionEvent.InputTuple,
      partialExecutionEvent.OutputTuple,
      partialExecutionEvent.OutputObject
    >;

    "transferWithDataEvent(address,address,uint256,bytes)": TypedContractEvent<
      transferWithDataEventEvent.InputTuple,
      transferWithDataEventEvent.OutputTuple,
      transferWithDataEventEvent.OutputObject
    >;
    transferWithDataEvent: TypedContractEvent<
      transferWithDataEventEvent.InputTuple,
      transferWithDataEventEvent.OutputTuple,
      transferWithDataEventEvent.OutputObject
    >;
  };
}
